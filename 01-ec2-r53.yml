- name: create ec2 and route 53
  hosts: local
  connection: local
  vars:
    ami_id: ami-09c813fb71547fc4f
    sg_id: sg-0fd0aa1e150fc139a
    zone_id: Z08089562F0RKY95DDUU9
    domain_name: awspractice.store
    instances:
    # - mongodb
    # - mysql
    # - rabbitmq
    # - redis
  tasks:
  - name: creating ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      instance_type: t3.micro
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
      tags:
        name: "{{ item }}"     
    loop: "{{ instances }}"
    register: ec2_output

  # - name : printing the ec2 output
  #   ansible.builtin.debug:
  #     msg: "{{ ec2_output }}"

  # - name : printing the public ip
  #   ansible.builtin.debug:
  #     msg: "{{ item.instances[0].public_ip_address }}"
  #   loop: "{{ ec2_output.results }}"

  # - name : printing the private ip
  #   ansible.builtin.debug:
  #     msg: "{{ item.instances[0].private_ip_address }}"
  #   loop: "{{ ec2_output.results }}"

  - name: creating r53 record
    amazon.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ item.item }}.{{ domain_name }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      overwrite: true
    loop: "{{ ec2_output.results }}"


  - name: creating r53 record for front end
    amazon.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ domain_name }}"
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      overwrite: true
    when: item.item == "frontend"
    loop: "{{ ec2_output.results }}"

 
      

